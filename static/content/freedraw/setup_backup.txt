import processing.opengl.*;

Camera myCam;
boolean autoCamera = true;
float VIEW_WIDTH;
float VIEW_HEIGHT;
PVector v1, v2, v3;
PVector vX = new PVector(1, 0, 0);

void setup() {
  VIEW_WIDTH = #_WIDTH_#;
  VIEW_HEIGHT = #_HEIGHT_#;
  size(VIEW_WIDTH, VIEW_HEIGHT, P3D);
  myCam = new Camera(200, true);
  myCam.setTarget( 0, 0, 300 );
  hint(ENABLE_OPENGL_4X_SMOOTH);
}



/********************************************* Camera Start *********************************************/
// the camera movement is combined here with mouse action

void mouseDragged()
{
  if (mouseButton == LEFT)
  {
    myCam.mouseOrbit();
  } else if (mouseButton == RIGHT)
  {
    myCam.mousePan();
  } else if (mouseButton == CENTER)
  {
    myCam.mouseZoom();
  }
}

void mouseScrolled(MouseEvent evt) {
  myCam.mouseZoom( mouseScroll * 7 );
}

// Camera change
void keyPressed() {
  if (key == 'R' || key == 'r') {
    if (autoCamera){
      autoCamera = false;
      }
    else{
      autoCamera = true;
     }
  }

        if (key == CODED)
        {
                if      (keyCode == UP)    myCam.pan(  0,  30);
                else if (keyCode == DOWN)  myCam.pan(  0, -30);
                else if (keyCode == LEFT)  myCam.pan( 30,   0);
                else if (keyCode == RIGHT) myCam.pan(-30,   0);
        }
        else
        {
                if (key == 'a')  myCam.pan( 30,   0);
                else if (key == 'd'|| key =='D')  myCam.pan(-30,   0);
                else if (key == 'w'|| key =='W')  myCam.pan(  0,  30);
                else if (key == 's'|| key =='S')  myCam.pan(  0, -30);
                else if (key == 'q'|| key =='Q')  myCam.orbit( 30,  0 );
                else if (key == 'e'|| key =='E')  myCam.orbit(-30,  0 );
                else if (key == 'z'|| key =='Z')  myCam.orbit(  0, 30 );
                else if (key == 'c'|| key =='C')  myCam.orbit(  0,-30 );
        }

}

class Camera
{
  float rotationSpeed = 0.005; // speed of rotation

  float angleX, angleY, angleZ;
  float currAngleX, currAngleY, currAngleZ;

  float distance;
  float currDistance;

  float transX, transY, transZ;
  float currTransX, currTransY, currTransZ;

  boolean smoothOrbit = false;


  // CONSTRUCTORS
  Camera(float distance)
  {
    setDistance(distance);
  }

  Camera(float distance, boolean smoothMovement)
  {
    this(distance);
    smooth();
  }

  //METHODS
  void mouseOrbit()
  {
    float dx = mouseX -pmouseX;
    float dy = mouseY -pmouseY;
    orbit(dx, dy);
  }

  void mouseZoom()
  {
    float dy = mouseY -pmouseY;
    this.setDistance(this.distance -dy);
  }

  void mouseZoom(float event)
  {
    float dy = event*10;
    this.setDistance(this.distance -dy);
  }

  void mousePan()
  {
    float dx = mouseX -pmouseX;
    float dy = mouseY -pmouseY;
    pan(dx, dy);
  }

  void pan(float dx, float dy)
  {
    this.transX += dx *cos(currAngleZ) ;//+dx*sin(currAngleX);
    this.transY += -dx*sin(currAngleZ)  +dy * cos(currAngleX);
    this.transZ += -dy *sin(currAngleX) ;
  }

  void orbit(float dx, float dy)
  {
    this.rotCamZ(-dx *rotationSpeed);
    this.rotCamX(-dy *rotationSpeed);
  }

  void setTarget(float x, float y, float z)
  {
    transX = -x;
    transY = -y;
    transZ = -z;
  }

  void smooth()
  {
    smoothOrbit = true;
  }

  void noSmooth()
  {
    smoothOrbit = false;
  }


  void setDistance(float distance)
  {
    this.distance = distance;
  }

  void rotCamX(float angle)
  {
    angleX += angle;
  }

  void rotCamY(float angle)
  {
    angleY += angle;
  }

  void rotCamZ(float angle)
  {
    angleZ += angle;
  }

  /**
   * applies the current camera settings
   * call it in your draw method before any paint job
   **/
  void useCam()
  {
    if (smoothOrbit)
    {
      if (abs(currAngleX-angleX) > 0.01)
        currAngleX += (angleX -currAngleX) /10.0 ;
      if (abs(currAngleY-angleY) > 0.01)
        currAngleY += (angleY -currAngleY) /10.0 ;
      if (abs(currAngleZ-angleZ) > 0.01)
        currAngleZ += (angleZ -currAngleZ) /10.0 ;

      if (abs(currTransX-transX) > 0.01)
        currTransX += (transX -currTransX) /10.0 ;
      if (abs(currTransY-transY) > 0.01)
        currTransY += (transY -currTransY) /10.0 ;
      if (abs(currTransZ-transZ) > 0.01)
        currTransZ += (transZ -currTransZ) /10.0 ;

      if (abs(currDistance-distance) > 0.01)
        currDistance += (distance -currDistance) /10.0 ;
    } else
    {
      currAngleX = angleX;
      currAngleY = angleY;
      currAngleZ = angleZ;

      currTransX = transX;
      currTransY = transY;
      currTransZ = transZ;

      currDistance = distance;
    }

    camera(  0, 0, this.currDistance,
    0, 0, 0,
    0, 1, 0
      );

    rotateX(currAngleX);
    rotateY(currAngleY);
    rotateZ(currAngleZ);

    translate(currTransX, currTransY, currTransZ);
  }

  float getAngleX()
  {
    return currAngleX;
  }

  float getAngleY()
  {
    return currAngleY;
  }

  float getAngleZ()
  {
    return currAngleZ;
  }
}
/********************************************* Camera End *********************************************/
void setupAxis() {
  noStroke();
  smooth();
  // X축
  fill(255,0,0);
  box(10000,1,1);
  fill(200,0,0);
  pushMatrix();
  translate(25,0,0);
  box(5,10,5);
  popMatrix();

  // axis indicator
  pushMatrix();
  for(int i=1; i<100; i++;){
    translate(50,0,0);
    box(1,10,1);
  }
  popMatrix();
  pushMatrix();
  for(int i=1; i<100; i++;){
     translate(-50,0,0);
     box(1,10,1);
  }
  popMatrix();


  // Y축
  fill(0,255,0);
  box(1,10000,1);
  pushMatrix();
  translate(0,-25,0);
  box(10,5,5);
  popMatrix();

    // axis indicator
    pushMatrix();
    for(int i=1; i<100; i++;){
      translate(0,-50,0);
      box(10,1,1);
    }
    popMatrix();
    pushMatrix();
    for(int i=1; i<100; i++;){
       translate(0,50,0);
       box(10,1,1);
    }
    popMatrix();

  // Z축
  fill(0,0,255);
  box(1,1,10000);
  pushMatrix();
  translate(0,0,25);
  box(5,10,5);
  popMatrix();

    // axis indicator
    pushMatrix();
    for(int i=1; i<100; i++;){
      translate(0,0,50);
      box(1,10,1);
    }
    popMatrix();
    pushMatrix();
    for(int i=1; i<100; i++;){
       translate(0,0,-50);
       box(1,10,1);
    }
    popMatrix();


  fill(255);
}

void drawLine(float x1, float y1, float z1, float x2, float y2, float z2) {
  v1 = new PVector(x1, y1, z1);
  v2 = new PVector(x2, y2, z2);
  v3 = new PVector((float)v2.x-(float)v1.x, (float)v2.y-(float)v1.y, (float)v2.z-(float)v1.z);
  float x = v3.x;
  float y = v3.y;
  float z = v3.z;
  PVector tV;

  float distance = PVector.dist(v1, v2);

  tV = new PVector(v3.x, 0, v3.z);
  float angleY = degrees(PVector.angleBetween(tV, vX));

  tV = new PVector(v3.x, 0, v3.z );
  float angleZ = degrees(PVector.angleBetween(v3, tV));

  pushMatrix();
  // root move
  translate(x1,-y1,z1);

  // rotate
  println("angleY : " + angleY);
  println("angleZ : " + angleZ);

  if(v3.z>=0){
      rotateY(radians(-angleY));
  }
  else{
     rotateY(radians(angleY));
  }

  if(v3.y >= 0){
    rotateZ(radians(-angleZ));
  }
  else{
    rotateZ(radians(angleZ));
  }


  // translate
 translate(distance/2,0,0);


  // draw
  box(distance, 2, 2);
  popMatrix();
}

void gridHelper(int size){
  int gridSize = size;
  for (int i = 0; i <= width/gridSize; i++)
    line(i*gridSize, 0, i*gridSize, height);
  for (int i = 0; i <= height/gridSize; i++)
    line(0, i*gridSize, width, i*gridSize);
}
void drawSomeCubes()
{
        float offset = 100;
        noStroke();
        stroke(255, 40);
        for (int i=0; i<5; i++)
        {
                for (int k=0; k<5; k++)
                {
                        for (int m=0; m<5; m++)
                        {
                                color c = color( i * (255/5), k * (255/5), m * (255/5) );
                                fill( c );
                              //  cube(offset *i, offset*k, offset* m, 20);
                        }
                }
        }
}
